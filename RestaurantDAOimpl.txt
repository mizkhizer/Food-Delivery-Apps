package DAO_Implementation;

import java.sql.Blob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.Utility.DBConnection;

import DAO.java.dao2;
import User.java.Restaurant;
import User.java.UserId;



public class RestaurantDAOimpl implements dao2  
{
	
	public final static String INSERT_QUERY = "INSERT INTO RESTAURANT (NAME, ADDRESS, PHONE, RATING, CUISINETYPE, ISACTIVE, ETA, ADMINUSERID, IMAGEPATH) " + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
	public final static String GET_QUERY = "SELECT * FROM RESTAURANT WHERE RESTAURANT_ID = ?";
	public final static String UPDATE_QUERY = "UPDATE RESTAURANT SET NAME = ?, ADDRESS = ?, PHONE = ?, RATING = ?, CUISINETYPE = ?, " + "ISACTIVE = ?, ETA = ?, ADMINUSERID = ?, IMAGEPATH = ? WHERE RESTAURANT_ID = ?";
	public final static String DELETE_QUERY = "DELETE FROM RESTAURANT WHERE RESTAURANT_ID = ?";
	public final static String GETALL_QUERY = "SELECT * FROM RESTAURANT";
	
	
	
	private static final Statement DBConnection = null;
	

	@Override
	public void addRestaurant(Restaurant restaurant) 
	{
	        
	        
	        try (Connection connection = DBConnection.getConnection();
	             PreparedStatement preparedStatement = connection.prepareStatement(INSERT_QUERY)) {
	            
	            preparedStatement.setString(1, restaurant.getName());
	            preparedStatement.setString(2, restaurant.getAddress());
	            preparedStatement.setLong(3, restaurant.getPhone());
	            preparedStatement.setDouble(4, restaurant.getRating());
	            preparedStatement.setString(5, restaurant.getCusineType());
	            preparedStatement.setString(6, restaurant.getIsActive());
	            preparedStatement.setString(7, restaurant.getEta());
	            preparedStatement.setInt(8, restaurant.getUserId());
	            preparedStatement.setBlob(9, restaurant.getImagePath());
	            
	            preparedStatement.executeUpdate();
	            
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }
	    }





		@Override
	    public Restaurant getRestaurantId(int restaurantId) 
	    {
	         
	        Restaurant restaurant = null;
	        
	        try (Connection connection = DBConnection.getConnection();
	             PreparedStatement preparedStatement = connection.prepareStatement(GET_QUERY)) 
	        {
	            
	            preparedStatement.setInt(1, restaurantId);
	            ResultSet resultSet = preparedStatement.executeQuery();
	            
	            
	        } 
	        catch (SQLException e)
	        {
	            e.printStackTrace();
	        }
	        
	        return restaurant;
	    }

	    
	    
	    
	    
	    @Override
	    public void updateRestaurant(Restaurant restaurant) 
	    {
	        try (Connection connection = DBConnection.getConnection();
	             PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_QUERY)) 
	        {
	            
	            preparedStatement.setString(1, restaurant.getName());
	            preparedStatement.setString(2, restaurant.getAddress());
	            preparedStatement.setLong(3, restaurant.getPhone());
	            preparedStatement.setDouble(4, restaurant.getRating());
	            preparedStatement.setString(5, restaurant.getCusineType());
	            preparedStatement.setString(6, restaurant.getIsActive());
	            preparedStatement.setString(7, restaurant.getEta());
	            preparedStatement.setInt(8, restaurant.getUserId());
	            preparedStatement.setBlob(9, restaurant.getImagePath());
	            preparedStatement.setInt(10, restaurant.getRestaurantId());
	            
	            preparedStatement.executeUpdate();
	            
	        } 
	        catch (SQLException e) 
	        {
	            e.printStackTrace();
	        }
	    }

	    
	    
	    
	    
	    @Override
	    public void deleteRestaurant(int restaurantId) {
	        
	        
	        try (Connection connection = DBConnection.getConnection();
	             PreparedStatement preparedStatement = connection.prepareStatement(DELETE_QUERY)) {
	            
	            preparedStatement.setInt(1, restaurantId);
	            preparedStatement.executeUpdate();
	            
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }
	    }

	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    @Override
	    public List<Restaurant> getAllRestaurants() {
	        
	        
	        ArrayList<Restaurant> restaurantList = new ArrayList<>();
	        
	        try
	        {
	        	Connection connection = DBConnection.getConnection();
	             PreparedStatement preparedStatement = connection.prepareStatement(GETALL_QUERY);
	             ResultSet resultSet = preparedStatement.executeQuery();
	             
	             while (resultSet.next()) 
	             {
	            	 Restaurant user = extractUser(resultSet);
	            	 restaurantList.add(user);
	             }
	                
	         }
	         catch (SQLException e) 
	        {
	            e.printStackTrace();
	        }
	        
	        return restaurantList;
	    }

		
			
	    
	   
	    Restaurant extractUser(ResultSet res) throws SQLException
		{
			int restaurantId = res.getInt("restaurantId");
			String name = res.getString("name");
			String address = res.getString("address");
			int phone = res.getInt("phone");
			int rating = res.getInt("rating");
			String cusineType = res.getString("cusineType");
			String isActive = res.getString("isActive");
			String eta = res.getString("eta");
			int userId = res.getInt("userId");
			Blob image = res.getBlob("image");
			
			
			Restaurant user = new Restaurant(restaurantId, name, address, phone, rating, cusineType, isActive, eta, userId, image);
			
			return user;
		}





		@Override
		public void addRestaurant1(Restaurant restaurant) {
			// TODO Auto-generated method stub
			
		}





		@Override
		public void updateRestaurant(RestaurantDAOimpl restaurant) {
			// TODO Auto-generated method stub
			
		}
		
}

